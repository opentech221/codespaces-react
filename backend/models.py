# backend/models.py
from database import db
from datetime import datetime

class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    nom = db.Column(db.String(100))
    prenom = db.Column(db.String(100))
    email = db.Column(db.String(100), unique=True, nullable=False)
    password_hash = db.Column(db.Text, nullable=False)
    role = db.Column(db.String(50))
    statut = db.Column(db.String(50))
    date_creation = db.Column(db.DateTime)
    dernier_login = db.Column(db.DateTime)
    telephone = db.Column(db.String(50))
    photo_profil_url = db.Column(db.Text)

class Organization(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    nom = db.Column(db.String(200))
    type = db.Column(db.String(100))
    statut_juridique = db.Column(db.String(100))
    date_creation = db.Column(db.Date)
    adresse = db.Column(db.Text)
    contact_email = db.Column(db.String(100))
    contact_tel = db.Column(db.String(50))
    description = db.Column(db.Text)
    site_web = db.Column(db.Text)
    logo_url = db.Column(db.Text)
    statut_actif = db.Column(db.Boolean, default=True)

class OrganizationMember(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    organization_id = db.Column(db.Integer, db.ForeignKey('organization.id'))
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'))
    role = db.Column(db.String(100))
    date_joined = db.Column(db.Date)
    date_left = db.Column(db.Date)
    statut = db.Column(db.String(50))
    observations = db.Column(db.Text)
    organization = db.relationship('Organization', backref='organization_members')
    user = db.relationship('User', backref='organization_members')

class OrganizationResource(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    organization_id = db.Column(db.Integer, db.ForeignKey('organization.id'))
    type = db.Column(db.String(50))
    description = db.Column(db.Text)
    quantite = db.Column(db.Integer)
    statut = db.Column(db.String(50))
    localisation = db.Column(db.Text)
    date_acquisition = db.Column(db.Date)
    valeur_estimee = db.Column(db.Numeric)
    organization = db.relationship('Organization', backref='organization_resources')

class Partner(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    nom = db.Column(db.String(200))
    type = db.Column(db.String(100))
    contact_email = db.Column(db.String(100))
    contact_tel = db.Column(db.String(50))
    adresse = db.Column(db.Text)
    site_web = db.Column(db.Text)
    description = db.Column(db.Text)
    statut_actif = db.Column(db.Boolean, default=True)

class Project(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    organization_id = db.Column(db.Integer, db.ForeignKey('organization.id'))
    titre = db.Column(db.String(200))
    description = db.Column(db.Text)
    objectif = db.Column(db.Text)
    statut = db.Column(db.String(50))
    budget_total = db.Column(db.Numeric)
    budget_utilise = db.Column(db.Numeric)
    date_debut = db.Column(db.Date)
    date_fin = db.Column(db.Date)
    localisation = db.Column(db.Text)
    categorie = db.Column(db.String(100))
    priorite = db.Column(db.String(50))
    risques_identifies = db.Column(db.Text)
    organization = db.relationship('Organization', backref='projects')

class ProjectActivity(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    project_id = db.Column(db.Integer, db.ForeignKey('project.id'))
    titre = db.Column(db.String(200))
    description = db.Column(db.Text)
    date_debut = db.Column(db.Date)
    date_fin = db.Column(db.Date)
    statut = db.Column(db.String(50))
    responsable_id = db.Column(db.Integer, db.ForeignKey('user.id'))
    ressources_utilisees = db.Column(db.Text)
    project = db.relationship('Project', backref='project_activities')
    responsable = db.relationship('User', backref='project_activities')

class ProjectTransaction(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    project_id = db.Column(db.Integer, db.ForeignKey('project.id'))
    montant = db.Column(db.Numeric)
    type = db.Column(db.String(50))
    date = db.Column(db.Date)
    justificatif_url = db.Column(db.Text)
    mode_paiement = db.Column(db.String(50))
    statut_validation = db.Column(db.String(50))
    utilisateur_enregistrement = db.Column(db.Integer, db.ForeignKey('user.id'))
    project = db.relationship('Project', backref='project_transactions')
    user = db.relationship('User', backref='project_transactions')

class ProjectFeedback(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    project_id = db.Column(db.Integer, db.ForeignKey('project.id'))
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'))
    note = db.Column(db.Numeric)
    commentaire = db.Column(db.Text)
    date = db.Column(db.DateTime)
    type_feedback = db.Column(db.String(50))
    project = db.relationship('Project', backref='project_feedbacks')
    user = db.relationship('User', backref='project_feedbacks')

class ProjectPartnerLink(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    project_id = db.Column(db.Integer, db.ForeignKey('project.id'))
    partner_id = db.Column(db.Integer, db.ForeignKey('partner.id'))
    statut_demande = db.Column(db.String(50))
    date_demande = db.Column(db.Date)
    date_reponse = db.Column(db.Date)
    commentaires = db.Column(db.Text)
    project = db.relationship('Project', backref='project_partner_links')
    partner = db.relationship('Partner', backref='project_partner_links')

class Messaging(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    sender_id = db.Column(db.Integer, db.ForeignKey('user.id'))
    receiver_id = db.Column(db.Integer, db.ForeignKey('user.id'))
    project_id = db.Column(db.Integer, db.ForeignKey('project.id'))
    message = db.Column(db.Text)
    date = db.Column(db.DateTime)
    lu = db.Column(db.Boolean, default=False)
    type_message = db.Column(db.String(50))
    sender = db.relationship('User', foreign_keys=[sender_id], backref='sent_messages')
    receiver = db.relationship('User', foreign_keys=[receiver_id], backref='received_messages')
    project = db.relationship('Project', backref='messages')

class LegalDocTemplate(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    type_doc = db.Column(db.String(100))
    contenu = db.Column(db.Text)
    date_creation = db.Column(db.DateTime)
    date_modification = db.Column(db.DateTime)
    auteur_id = db.Column(db.Integer, db.ForeignKey('user.id'))
    statut_actif = db.Column(db.Boolean, default=True)
    auteur = db.relationship('User', backref='legal_doc_templates')

class LegalNotification(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    organization_id = db.Column(db.Integer, db.ForeignKey('organization.id'))
    type_notif = db.Column(db.String(100))
    message = db.Column(db.Text)
    date_envoi = db.Column(db.DateTime)
    statut = db.Column(db.String(50))
    niveau_urgence = db.Column(db.String(50))
    organization = db.relationship('Organization', backref='legal_notifications')

class UserActivityLog(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'))
    action = db.Column(db.String(200))
    details = db.Column(db.Text)
    date = db.Column(db.DateTime)
    ip_address = db.Column(db.String(50))
    device = db.Column(db.String(100))
    user = db.relationship('User', backref='user_activity_logs')
